using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEuler002LINQ
{
    public class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("PROJECT EULER PROBLEM #002: EVEN FIBONACCI NUMBERS");
            Console.WriteLine();
            Console.WriteLine("Each new term in the Fibonacci sequence is generated by \nadding the previous two terms.");
            Console.WriteLine("By starting with 1 and 2, the first 10 terms will be: \n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\n");
            Console.WriteLine("By considering the terms in the Fibonacci sequence whose \nvalues do not exceed four million (4000000),");
            Console.WriteLine("find the sum of the even-valued terms.");
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("Result: {0}", SumOfAllEvenNumbersFibonacci());
            Console.ReadLine();
        }

        /// <summary>
        /// Determines the sum of all even Fibonacci numbers below 4000000.
        /// </summary>
        /// <returns>the sum of all even Fibonacci numbers below four million</returns>
        private static int SumOfAllEvenNumbersFibonacci()
        {
            // For each number in the sequence, take it (if below four million) and sum it.
            // Note that the even check is withheld, as only every third number is returned
            // from the method.
            return FibonacciSequence(1, 1).TakeWhile(x => (x <= 4000000)).Sum();
        }
        /// <summary>
        /// Determines the next even number in the Fibonacci sequence and returns said number
        /// when it occurs.
        /// </summary>
        /// <param name="first">first: int (first number in the Fibonacci sequence)</param>
        /// <param name="second">second: int (second number in the Fibonacci sequence)</param>
        /// <returns>yield returns even Fibonacci numbers</returns>
        private static IEnumerable<int> FibonacciSequence(int first, int second)
        {
            int a = first;              // First number in the Fibonacci sequence.
            int b = second;             // Second number in the Fibonacci sequence.
            int c = first + second;     // Third number in the Fibonacci sequence.

            yield return c;             // Return the first first even number and pick up here on next call.
            while (true)
            {
                // We can assume that every third number in the sequence is even.
                // 1, 1, 2, 3, 4, 8, 13, 21, 34, 55, 89, 144, ...
                // a, b, c, a, b, c,  a,  b,  c,  a,  b,   c
                a = b + c;
                b = c + a;
                c = a + b;
                yield return c;
            }
        }
    }
}
